var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from '@angular/core';
import { unpatchedAudioContextConstructor } from '../providers/unpatched-audio-context-constructor';
/**
 * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers
 * did not refuse to decode invalid parameters with a TypeError.
 */
let DecodeAudioDataTypeErrorSupportTester = class DecodeAudioDataTypeErrorSupportTester {
    constructor(_UnpatchedAudioContext) {
        this._UnpatchedAudioContext = _UnpatchedAudioContext;
    }
    test() {
        if (this._UnpatchedAudioContext === null) {
            return Promise.resolve(false);
        }
        const audioContext = new this._UnpatchedAudioContext();
        // Bug #21: Safari does not support promises yet.
        // Bug #1: Chrome Canary & Safari requires a successCallback.
        return new Promise((resolve) => {
            audioContext
                .decodeAudioData(null, () => {
                // Ignore the success callback.
            }, (err) => {
                audioContext
                    .close()
                    .catch(() => {
                    // Ignore errors.
                });
                resolve(err instanceof TypeError);
            })
                .catch(() => {
                // Ignore errors.
            });
        });
    }
};
DecodeAudioDataTypeErrorSupportTester = __decorate([
    Injectable(),
    __param(0, Inject(unpatchedAudioContextConstructor))
], DecodeAudioDataTypeErrorSupportTester);
export { DecodeAudioDataTypeErrorSupportTester };
//# sourceMappingURL=decode-audio-data-type-error-support.js.map