var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from '@angular/core';
import { InvalidStateErrorFactory } from '../factories/invalid-state-error';
let ChannelMergerNodeWrapper = class ChannelMergerNodeWrapper {
    constructor(_invalidStateErrorFactory) {
        this._invalidStateErrorFactory = _invalidStateErrorFactory;
    }
    wrap(audioContext, channelMergerNode) {
        const audioBufferSourceNode = audioContext.createBufferSource();
        channelMergerNode.channelCount = 1;
        channelMergerNode.channelCountMode = 'explicit';
        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
        const length = channelMergerNode.numberOfInputs;
        for (let i = 0; i < length; i += 1) {
            audioBufferSourceNode.connect(channelMergerNode, 0, i);
        }
        Object.defineProperty(channelMergerNode, 'channelCount', {
            get: () => 1,
            set: () => {
                throw this._invalidStateErrorFactory.create();
            }
        });
        Object.defineProperty(channelMergerNode, 'channelCountMode', {
            get: () => 'explicit',
            set: () => {
                throw this._invalidStateErrorFactory.create();
            }
        });
    }
};
ChannelMergerNodeWrapper = __decorate([
    Injectable(),
    __param(0, Inject(InvalidStateErrorFactory))
], ChannelMergerNodeWrapper);
export { ChannelMergerNodeWrapper };
//# sourceMappingURL=channel-merger-node.js.map