var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from '@angular/core';
import { InvalidAccessErrorFactory } from '../factories/invalid-access-error';
let AudioNodeConnectMethodWrapper = class AudioNodeConnectMethodWrapper {
    constructor(_invalidAccessErrorFactory) {
        this._invalidAccessErrorFactory = _invalidAccessErrorFactory;
    }
    wrap(audioNode) {
        audioNode.connect = ((connect, isSupportingChaining, isSupportingConnecting) => {
            if (isSupportingChaining) {
                return (destination, output = 0, input = 0) => {
                    try {
                        return connect.call(audioNode, destination, output, input);
                    }
                    catch (err) {
                        if (err.code === 12) {
                            throw this._invalidAccessErrorFactory.create();
                        }
                        throw err;
                    }
                };
            }
            else {
                return (destination, output = 0, input = 0) => {
                    try {
                        connect.call(audioNode, destination, output, input);
                    }
                    catch (err) {
                        if (err.code === 12) {
                            throw this._invalidAccessErrorFactory.create();
                        }
                        throw err;
                    }
                    return destination;
                };
            }
        })(audioNode.connect);
    }
};
AudioNodeConnectMethodWrapper = __decorate([
    Injectable(),
    __param(0, Inject(InvalidAccessErrorFactory))
], AudioNodeConnectMethodWrapper);
export { AudioNodeConnectMethodWrapper };
//# sourceMappingURL=audio-node-connect-method.js.map