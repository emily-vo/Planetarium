import { OpaqueToken } from '@angular/core';
import { DataCloneErrorFactory } from '../factories/data-clone-error';
import { IIRFilterNodeFaker } from '../fakers/iir-filter-node';
import { IAudioContextConstructor } from '../interfaces/audio-context';
import { ConnectingSupportTester } from '../testers/connecting-support';
import { DisconnectingSupportTester } from '../testers/disconnecting-support';
import { PromiseSupportTester } from '../testers/promise-support';
import { AudioBufferWrapper } from '../wrappers/audio-buffer';
import { AudioBufferSourceNodeStopMethodWrapper } from '../wrappers/audio-buffer-source-node-stop-method';
import { AudioNodeConnectMethodWrapper } from '../wrappers/audio-node-connect-method';
import { ChannelMergerNodeWrapper } from '../wrappers/channel-merger-node';
import { ChannelSplitterNodeWrapper } from '../wrappers/channel-splitter-node';
import { IIRFilterNodeGetFrequencyResponseMethodWrapper } from '../wrappers/iir-filter-node-get-frequency-response-method';
export declare const audioContextConstructor: OpaqueToken;
export declare const AUDIO_CONTEXT_CONSTRUCTOR_PROVIDER: {
    deps: (OpaqueToken | typeof DataCloneErrorFactory | typeof PromiseSupportTester | typeof IIRFilterNodeFaker | typeof ConnectingSupportTester | typeof DisconnectingSupportTester | typeof AudioBufferWrapper | typeof AudioBufferSourceNodeStopMethodWrapper | typeof AudioNodeConnectMethodWrapper | typeof ChannelMergerNodeWrapper | typeof ChannelSplitterNodeWrapper | typeof IIRFilterNodeGetFrequencyResponseMethodWrapper)[];
    provide: OpaqueToken;
    useFactory: (analyserNodeGetFloatTimeDomainDataMethodWrapper: any, analyserNodeGetFloatTimeDomainDataSupportTester: any, audioBufferCopyChannelMethodsSupportTester: any, audioBufferCopyChannelMethodsWrapper: any, audioBufferSourceNodeStopMethodWrapper: any, audioBufferWrapper: any, audioNodeConnectMethodWrapper: any, audioNodeDisconnectMethodWrapper: any, chainingSupportTester: any, channelMergerNodeWrapper: any, channelSplitterNodeWrapper: any, connectingSupportTester: any, dataCloneErrorFactory: any, detachedAudioBuffers: any, disconnectingSupportTester: any, encodingErrorFactory: any, invalidAccessErrorFactory: any, invalidStateErrorFactory: any, iIRFilterNodeFaker: any, iIRFilterNodeGetFrequencyResponseMethodWrapper: any, promiseSupportTester: any, stopStoppedSupportTester: any, UnpatchedAudioContext: any) => IAudioContextConstructor;
};
