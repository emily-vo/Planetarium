export declare class OfflineIIRFilterNodeFaker {
    private _feedback;
    private _feedforward;
    private _invalidStateErrorFactory;
    private _length;
    private _nativeNode;
    private _node;
    private _notSupportedErrorFactory;
    private _numberOfChannels;
    private _promiseSupportTester;
    private _proxy;
    private _sources;
    private _UnpatchedOfflineAudioContext;
    constructor({fakeNodeStore, feedback, feedforward, invalidStateErrorFactory, length, nativeNode, notSupportedErrorFactory, numberOfChannels, promiseSupportTester, sampleRate, UnpatchedOfflineAudioContext}: {
        fakeNodeStore: any;
        feedback: any;
        feedforward: any;
        invalidStateErrorFactory: any;
        length: any;
        nativeNode: any;
        notSupportedErrorFactory: any;
        numberOfChannels: any;
        promiseSupportTester: any;
        sampleRate: any;
        UnpatchedOfflineAudioContext: any;
    });
    readonly proxy: any;
    private _applyFilter(renderedBuffer, offlineAudioContext);
    render(offlineAudioContext: any): Promise<any>;
    wire(source: any, output: any, input: any): any;
    unwire(source: any): void;
}
export declare class OfflineIIRFilterNodeFakerFactory {
    private _UnpatchedOfflineAudioContext;
    private _invalidStateErrorFactory;
    private _notSupportedErrorFactory;
    private _promiseSupportTester;
    constructor(_UnpatchedOfflineAudioContext: any, _invalidStateErrorFactory: any, _notSupportedErrorFactory: any, _promiseSupportTester: any);
    create({fakeNodeStore, feedback, feedforward, length, nativeNode, numberOfChannels, sampleRate}: {
        fakeNodeStore: any;
        feedback: any;
        feedforward: any;
        length: any;
        nativeNode: any;
        numberOfChannels: any;
        sampleRate: any;
    }): OfflineIIRFilterNodeFaker;
}
