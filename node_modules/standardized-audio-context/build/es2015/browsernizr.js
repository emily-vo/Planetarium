/*!
 * modernizr v3.5.0
 * Build https://modernizr.com/download?-promises-typedarrays-webaudio-dontmin
 *
 * Copyright (c)
 *  Faruk Ates
 *  Paul Irish
 *  Alex Sexton
 *  Ryan Seddon
 *  Patrick Kettner
 *  Stu Cox
 *  Richard Herrera

 * MIT License
 */
export default (function (window, document, undefined) {
    var tests = [];
    /**
     *
     * ModernizrProto is the constructor for Modernizr
     *
     * @class
     * @access public
     */
    var ModernizrProto = {
        // The current version, dummy
        _version: '3.5.0',
        // Any settings that don't work as separate modules
        // can go in here as configuration.
        _config: {
            'classPrefix': '',
            'enableClasses': true,
            'enableJSClass': true,
            'usePrefixes': true
        },
        // Queue of tests
        _q: [],
        // Stub these for people who are listening
        on: function (test, cb) {
            // I don't really think people should do this, but we can
            // safe guard it a bit.
            // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
            // This is in case people listen to synchronous tests. I would leave it out,
            // but the code to *disallow* sync tests in the real version of this
            // function is actually larger than this.
            var self = this;
            setTimeout(function () {
                cb(self[test]);
            }, 0);
        },
        addTest: function (name, fn, options) {
            tests.push({ name: name, fn: fn, options: options });
        },
        addAsyncTest: function (fn) {
            tests.push({ name: null, fn: fn });
        }
    };
    // Fake some of Object.create so we can force non test results to be non "own" properties.
    var Modernizr = function () { };
    Modernizr.prototype = ModernizrProto;
    // Leak modernizr globally when you `require` it rather than force it here.
    // Overwrite name so constructor name is nicer :D
    Modernizr = new Modernizr();
    var classes = [];
    /**
     * is returns a boolean if the typeof an obj is exactly type.
     *
     * @access private
     * @function is
     * @param {*} obj - A thing we want to check the type of
     * @param {string} type - A string to compare the typeof against
     * @returns {boolean}
     */
    function is(obj, type) {
        return typeof obj === type;
    }
    ;
    /**
     * Run through all tests and detect their support in the current UA.
     *
     * @access private
     */
    function testRunner() {
        var featureNames;
        var feature;
        var aliasIdx;
        var result;
        var nameIdx;
        var featureName;
        var featureNameSplit;
        for (var featureIdx in tests) {
            if (tests.hasOwnProperty(featureIdx)) {
                featureNames = [];
                feature = tests[featureIdx];
                // run the test, throw the return value into the Modernizr,
                // then based on that boolean, define an appropriate className
                // and push it into an array of classes we'll join later.
                //
                // If there is no name, it's an 'async' test that is run,
                // but not directly added to the object. That should
                // be done with a post-run addTest call.
                if (feature.name) {
                    featureNames.push(feature.name.toLowerCase());
                    if (feature.options && feature.options.aliases && feature.options.aliases.length) {
                        // Add all the aliases into the names list
                        for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
                            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
                        }
                    }
                }
                // Run the test, or use the raw value if it's not a function
                result = is(feature.fn, 'function') ? feature.fn() : feature.fn;
                // Set each of the names on the Modernizr object
                for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
                    featureName = featureNames[nameIdx];
                    // Support dot properties as sub tests. We don't do checking to make sure
                    // that the implied parent tests have been added. You must call them in
                    // order (either in the test, or make the parent test a dependency).
                    //
                    // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
                    // hashtag famous last words
                    featureNameSplit = featureName.split('.');
                    if (featureNameSplit.length === 1) {
                        Modernizr[featureNameSplit[0]] = result;
                    }
                    else {
                        // cast to a Boolean, if not one already
                        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
                            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
                        }
                        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
                    }
                    classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
                }
            }
        }
    }
    ;
    /*!
    {
      "name": "ES6 Promises",
      "property": "promises",
      "caniuse": "promises",
      "polyfills": ["es6promises"],
      "authors": ["Krister Kari", "Jake Archibald"],
      "tags": ["es6"],
      "notes": [{
        "name": "The ES6 promises spec",
        "href": "https://github.com/domenic/promises-unwrapping"
      },{
        "name": "Chromium dashboard - ES6 Promises",
        "href": "https://www.chromestatus.com/features/5681726336532480"
      },{
        "name": "JavaScript Promises: There and back again - HTML5 Rocks",
        "href": "http://www.html5rocks.com/en/tutorials/es6/promises/"
      }]
    }
    !*/
    /* DOC
    Check if browser implements ECMAScript 6 Promises per specification.
    */
    Modernizr.addTest('promises', function () {
        return 'Promise' in window &&
            // Some of these methods are missing from
            // Firefox/Chrome experimental implementations
            'resolve' in window.Promise &&
            'reject' in window.Promise &&
            'all' in window.Promise &&
            'race' in window.Promise &&
            // Older version of the spec had a resolver object
            // as the arg rather than a function
            (function () {
                var resolve;
                new window.Promise(function (r) { resolve = r; });
                return typeof resolve === 'function';
            }());
    });
    /*!
    {
      "name": "Typed arrays",
      "property": "typedarrays",
      "caniuse": "typedarrays",
      "tags": ["js"],
      "authors": ["Stanley Stuart (@fivetanley)"],
      "notes": [{
        "name": "MDN documentation",
        "href": "https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays"
      },{
        "name": "Kronos spec",
        "href": "https://www.khronos.org/registry/typedarray/specs/latest/"
      }],
      "polyfills": ["joshuabell-polyfill"]
    }
    !*/
    /* DOC
    Detects support for native binary data manipulation via Typed Arrays in JavaScript.
    
    Does not check for DataView support; use `Modernizr.dataview` for that.
    */
    // Should fail in:
    // Internet Explorer <= 9
    // Firefox <= 3.6
    // Chrome <= 6.0
    // iOS Safari < 4.2
    // Safari < 5.1
    // Opera < 11.6
    // Opera Mini, <= 7.0
    // Android Browser < 4.0
    // Blackberry Browser < 10.0
    Modernizr.addTest('typedarrays', 'ArrayBuffer' in window);
    /*!
    {
      "name": "Web Audio API",
      "property": "webaudio",
      "caniuse": "audio-api",
      "polyfills": ["xaudiojs", "dynamicaudiojs", "audiolibjs"],
      "tags": ["audio", "media"],
      "builderAliases": ["audio_webaudio_api"],
      "authors": ["Addy Osmani"],
      "notes": [{
        "name": "W3 Specification",
        "href": "https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html"
      }]
    }
    !*/
    /* DOC
    Detects the older non standard webaudio API, (as opposed to the standards based AudioContext API)
    */
    Modernizr.addTest('webaudio', function () {
        var prefixed = 'webkitAudioContext' in window;
        var unprefixed = 'AudioContext' in window;
        if (Modernizr._config.usePrefixes) {
            return prefixed || unprefixed;
        }
        return unprefixed;
    });
    // Run each test
    testRunner();
    delete ModernizrProto.addTest;
    delete ModernizrProto.addAsyncTest;
    // Run the things that are supposed to run after the tests
    for (var i = 0; i < Modernizr._q.length; i++) {
        Modernizr._q[i]();
    }
    // Leak Modernizr namespace
    return Modernizr;
    ;
})(window, document);
//# sourceMappingURL=browsernizr.js.map